// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model AccountTable {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user UserTable @relation(fields: [userId], references: [id], onDelete: Cascade)

   @@unique([provider, providerAccountId])
  @@index([userId])
}

model SessionTable {
  id           String    @id @default(cuid())
  sessionToken String    @unique
  userId       String
  expires      DateTime
  user         UserTable @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model VerificationTokenTable {
  identifier String
  token      String   @unique
  expires    DateTime

    @@id([identifier, token])
}

enum UserRole {
  USER
  ADMIN
}

enum ProfileVisibility {
  PUBLIC
  PRIVATE
  FOLLOWERS_ONLY
}

enum PostCategory {
  GENERAL
  ANNOUNCEMENT
  QUESTION
}

enum NotificationType {
  FOLLOW
  LIKE
  COMMENT
}

model UserTable {
  id             String             @id @default(cuid())
  email          String             @unique
  username       String             @unique
  firstName      String
  lastName       String
  emailVerified  DateTime?
  password       String?
  role           UserRole           @default(USER)
  isActive       Boolean            @default(true)
  lastLoginAt    DateTime?
  createdAt      DateTime           @default(now())
  updatedAt      DateTime           @updatedAt
  bio            String?            @db.VarChar(160)
  avatarUrl      String?
  website        String?
  location       String?
  visibility     ProfileVisibility? @default(PUBLIC)
  followersCount Int                @default(0)
  followingCount Int                @default(0)
  postsCount     Int                @default(0)

  accounts AccountTable[]
  sessions SessionTable[]
  posts    PostTable[]
  comments CommentTable[]
  likes    LikeTable[]

  followers FollowTable[] @relation("UserFollowers")
  following FollowTable[] @relation("UserFollowing")

  sentNotifications     NotificationTable[] @relation("NotificationSender")
  receivedNotifications NotificationTable[] @relation("NotificationRecipient")

  @@map("users")
}

model PostTable {
  id           String       @id @default(cuid())
  content      String       @db.VarChar(280)
  imageUrl     String?
  category     PostCategory @default(GENERAL)
  isActive     Boolean      @default(true)
  likeCount    Int          @default(0)
  commentCount Int          @default(0)
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt

  authorId      String
  author        UserTable           @relation(fields: [authorId], references: [id], onDelete: Cascade)
  comments      CommentTable[]
  likes         LikeTable[]
  notifications NotificationTable[]

  @@map("posts")
}

model CommentTable {
  id        String   @id @default(cuid())
  content   String   @db.VarChar(200)
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  authorId String
  author   UserTable   @relation(fields: [authorId], references: [id], onDelete: Cascade)
  postId   String
  post     PostTable   @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@map("comments")
}

model LikeTable {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())

  userId String
  user   UserTable   @relation(fields: [userId], references: [id], onDelete: Cascade)
  postId String
  post   PostTable   @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@unique([userId, postId])
  @@map("likes")
}

model FollowTable {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  followerId  String
  followingId String
  follower    UserTable   @relation("UserFollowing", fields: [followerId], references: [id], onDelete: Cascade)
  following   UserTable   @relation("UserFollowers", fields: [followingId], references: [id], onDelete: Cascade)

  @@unique([followerId, followingId])
  @@map("follows")
}

model NotificationTable {
  id        String           @id @default(cuid())
  type      NotificationType
  message   String           @db.VarChar(200)
  isRead    Boolean          @default(false)
  createdAt DateTime         @default(now())

  recipientId String
  senderId    String
  postId      String?

  recipient UserTable  @relation("NotificationRecipient", fields: [recipientId], references: [id], onDelete: Cascade)
  sender    UserTable  @relation("NotificationSender", fields: [senderId], references: [id], onDelete: Cascade)
  post      PostTable? @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@map("notifications")
}
